import sqlite3

SQL_SELECT = '''
    SELECT
        id, short_url, original_url, created
    FROM
        shortener
'''

#хитрая логика:
def dict_factory(cursor, row):
    d={}
    for i, col in enumerate(cursor.description):
        d[col[0]] = row[1]
    return d

def connect(db_name = None):
    if db_name is None:
        db_name = ":Memory:"

    conn = sqlite3.connect(db_name)
    conn.row_factory = dict_factory
    return conn

def initialize(conn):
    with conn:
        cursor = conn.executescript('''
            CREATE TABLE IF NOT EXISTS shortener (
                id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ,
                short_url TEXT NOT NULL DEFAULT '',
                original_url TEXY NOT NULL,
                created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
            )
        ''')
    #cursor.commit()
def add_url(conn, url, domain=''):
    url = url.strip('/')
    if not url:
        pass
    # Добавляем значения в колонку
    cursor = conn.execute('''
    INSERT INTO shortener (
    original_url
    ) VALUES (
    ?
    )
    ''',(url,))

    #хитрая логика 2
    #Возвращает последний вставленный pk
    pk = cursor.lastrowid
    short_url = ''
    #что бы обновить много колонок через запятую ?,
    conn.execute('''
        UPDATE shortener SET short_url=? WHERE id=?
    ''', (short_url, pk))
    return short_url


def find_all(conn):
    with conn:
        cursor = conn.execute(SQL_SELECT)
        return cursor.fetchall()

def find_url_by_pk(conn, pk):
    with conn:
        cursor = conn.execute(SQL_SELECT + ' WHERE id = ?', (pk,))
        return cursor.fetchone()

def find_url_by_short(conn, short_url):
    pass

def find_url_by_origin(conn, original_url):
    original_url = original_url.strip('/')

    with conn:
        cursor = conn.execute(SQL_SELECT + 'WHERE original_url = ?', (original_url,))
        return cursor.fetchone()